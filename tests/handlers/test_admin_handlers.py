"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
"""

from unittest.mock import MagicMock

import pytest

from app.handlers.admin import list_users
from app.models.user import User
from app.services.user_service import UserService

# --- –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---

ADMIN_USER = User(telegram_id=100, name="Admin", role="admin")
SAMPLE_USERS = [
    ADMIN_USER,
    User(telegram_id=200, name="Technician", role="technician"),
]

# --- –§–∏–∫—Å—Ç—É—Ä—ã ---


@pytest.fixture
def mock_update_context_for_handlers(mocker) -> tuple[MagicMock, MagicMock]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–æ–≤ Update –∏ Context –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    mock_update = mocker.MagicMock()
    mock_context = mocker.MagicMock()

    mock_update.effective_message.reply_text = mocker.AsyncMock()
    # –Ø–≤–Ω–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ
    mock_update.callback_query = None

    mock_context.application.bot_data = {
        "user_service": mocker.MagicMock(spec=UserService)
    }
    mock_context.user_data = {}

    return mock_update, mock_context


# --- –¢–µ—Å—Ç—ã ---


@pytest.mark.asyncio
async def test_list_users_success(mock_update_context_for_handlers):
    """
    –¢–µ—Å—Ç: –ö–æ–º–∞–Ω–¥–∞ /listusers —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    # Arrange
    mock_update, mock_context = mock_update_context_for_handlers
    user_service = mock_context.application.bot_data["user_service"]

    mock_update.effective_user.id = ADMIN_USER.telegram_id
    user_service.get_user_by_id.return_value = ADMIN_USER
    user_service.get_all_users.return_value = SAMPLE_USERS

    # Act
    await list_users(mock_update, mock_context)

    # Assert
    reply_mock = mock_update.effective_message.reply_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 3 —Å–æ–æ–±—â–µ–Ω–∏—è: 1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assert reply_mock.call_count == 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    first_call_kwargs = reply_mock.call_args_list[0].kwargs
    assert first_call_kwargs["text"] == "--- üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Admin)
    second_call_kwargs = reply_mock.call_args_list[1].kwargs
    admin_card_text = second_call_kwargs["text"]
    assert "üë§ <b>Admin</b>" in admin_card_text
    assert "<code>100</code>" in admin_card_text
    assert "<i>admin</i>" in admin_card_text
    assert second_call_kwargs["parse_mode"] == "HTML"
    assert second_call_kwargs["reply_markup"] is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Technician)
    third_call_kwargs = reply_mock.call_args_list[2].kwargs
    tech_card_text = third_call_kwargs["text"]
    assert "üë§ <b>Technician</b>" in tech_card_text
    assert "<code>200</code>" in tech_card_text
    assert "<i>technician</i>" in tech_card_text


@pytest.mark.asyncio
async def test_list_users_empty(mock_update_context_for_handlers):
    """
    –¢–µ—Å—Ç: –ö–æ–º–∞–Ω–¥–∞ /listusers –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    # Arrange
    mock_update, mock_context = mock_update_context_for_handlers
    user_service = mock_context.application.bot_data["user_service"]

    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –°–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    mock_update.effective_user.id = ADMIN_USER.telegram_id
    user_service.get_user_by_id.return_value = ADMIN_USER

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
    user_service.get_all_users.return_value = []

    # Act
    await list_users(mock_update, mock_context)

    # Assert
    mock_update.effective_message.reply_text.assert_awaited_once_with(
        "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
    )
