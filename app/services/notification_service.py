"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –≤ —á–∞—Ç—ã.
"""

import logging
from datetime import datetime

import pytz
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode

from app.core.config import settings
from app.models.request import MaintenanceRequest

logger = logging.getLogger(__name__)


def _format_datetime(dt: datetime | None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    if not dt:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è –≤ UTC, –µ—Å–ª–∏ –æ–Ω–æ "–Ω–∞–∏–≤–Ω–æ–µ"
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=pytz.utc)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    display_tz = pytz.timezone(settings.display_timezone)
    local_dt = dt.astimezone(display_tz)

    return local_dt.strftime("%d.%m.%Y –≤ %H:%M")


class NotificationService:
    @staticmethod
    async def send_new_request_notification(
        bot: Bot, chat_id: int, request: MaintenanceRequest
    ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ —á–∞—Ç —Ç–µ—Ö—Å–ª—É–∂–±—ã.
        """
        created_at_str = _format_datetime(request.created_at)
        text = (
            f"üö® **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: #{str(request.request_uuid)[:8]}** üö®\n\n"
            f"üìç **–õ–æ–∫–∞—Ü–∏—è:** {request.location}\n"
            f"üîß **–¢–∏–ø –ø–æ–ª–æ–º–∫–∏:** {request.issue_type}\n"
            f"üë§ **–ó–∞—è–≤–∏—Ç–µ–ª—å:** {request.reporter_name}\n"
            f"üïì **–°–æ–∑–¥–∞–Ω–∞:** {created_at_str}\n\n"
            f"–°—Ç–∞—Ç—É—Å: üÜï –ù–æ–≤—ã–π"
        )

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                    callback_data=f"accept_req:{request.request_uuid}",
                ),
            ],
            [InlineKeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ", url=request.photo_before_url)]
            if request.photo_before_url
            else [],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
            )
            logger.info(
                f"Sent new request notification for {request.request_uuid} to chat {chat_id}."
            )
        except Exception as e:
            logger.error(
                f"Failed to send notification for {request.request_uuid} to chat {chat_id}: {e}",
                exc_info=True,
            )
