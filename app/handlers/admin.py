"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
"""

import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.core.decorators import require_role
from app.models.user import User
from app.services.user_service import UserService

logger = logging.getLogger(__name__)


@require_role("admin")
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    message = update.effective_message
    user_service: UserService = context.application.bot_data["user_service"]
    all_users = user_service.get_all_users()

    if not all_users:
        await message.reply_text("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    await message.reply_text(text="--- üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---")
    for user in all_users:
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton(
                    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user:{user.telegram_id}"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        user_info = (
            f"üë§ <b>{user.name}</b>\n"
            f"   ID: <code>{user.telegram_id}</code>\n"
            f"   –†–æ–ª—å: <i>{user.role}</i>"
        )
        await message.reply_text(
            text=user_info, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )


@require_role("admin")
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <telegram_id> <—Ä–æ–ª—å>
    –ü—Ä–∏–º–µ—Ä: /adduser 123456789 housekeeper
    """
    message = update.effective_message

    if len(context.args) != 2:
        await message.reply_text(
            "‚ö†Ô∏è **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.**\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`/adduser <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Ä–æ–ª—å>`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/adduser 123456789 housekeeper`\n\n"
            "(–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –≤—ã—à–µ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)"
        )
        return

    try:
        user_id_to_add = int(context.args[0])
    except ValueError:
        await message.reply_text("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    role = context.args[1].lower()
    user_service: UserService = context.application.bot_data["user_service"]

    if user_service.get_user_by_id(user_id_to_add):
        await message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id_to_add}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
        return

    name_placeholder = f"User_{user_id_to_add}"
    new_user = User(telegram_id=user_id_to_add, name=name_placeholder, role=role)

    try:
        user_service.add_user(new_user)
        await message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{new_user.telegram_id}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é `{role}`."
        )
        logger.info(
            f"Admin {update.effective_user.id} added user {new_user.telegram_id} with role {role}."
        )
    except Exception as e:
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.error(f"Failed to add user: {e}", exc_info=True)


@require_role("admin")
async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deluser <telegram_id>
    –ü—Ä–∏–º–µ—Ä: /deluser 123456789
    """
    message = update.effective_message

    if not context.args:
        await message.reply_text(
            "‚ö†Ô∏è **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.**\n\n"
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`/deluser <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/deluser 123456789`"
        )
        return

    try:
        user_id_to_delete = int(context.args[0])
    except ValueError:
        await message.reply_text("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user_service: UserService = context.application.bot_data["user_service"]

    if user_service.delete_user(user_id_to_delete):
        await message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id_to_delete}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
        )
        logger.info(
            f"Admin {update.effective_user.id} deleted user {user_id_to_delete}."
        )
    else:
        await message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id_to_delete}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
        )


async def admin_user_callback(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    # –ü–∞—Ä—Å–∏–º callback_data. –§–æ—Ä–º–∞—Ç: "–¥–µ–π—Å—Ç–≤–∏–µ:id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    action, user_id_str = query.data.split(":", 1)
    user_id = int(user_id_str)

    user_service: UserService = context.application.bot_data["user_service"]

    if action == "delete_user":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        # –≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        admin_user = user_service.get_user_by_id(query.from_user.id)
        if not (admin_user and admin_user.role == "admin"):
            await query.edit_message_text(text="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return

        logger.info(f"Admin {query.from_user.id} initiated deletion of user {user_id}.")
        if user_service.delete_user(user_id):
            await query.edit_message_text(
                text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —É–¥–∞–ª–µ–Ω."
            )
        else:
            await query.edit_message_text(
                text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
