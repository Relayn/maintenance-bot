"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.
"""

import logging

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)

from app.core.config import settings
from app.core.decorators import require_role
from app.models.request import MaintenanceRequest
from app.services.google_api import GoogleAPIService
from app.services.notification_service import NotificationService

logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
SUCCESS_MESSAGE = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ª—É–∂–±—É."

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(LOCATION, ISSUE_TYPE, PHOTO, CONFIRMATION) = range(4)


@require_role("housekeeper", "admin")
async def new_request_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏."""
    message = update.effective_message
    user = update.effective_user
    context.user_data["current_request"] = MaintenanceRequest(
        reporter_id=user.id, reporter_name=user.first_name or user.username
    )

    await message.reply_text(
        "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.\n\n"
        "<b>–®–∞–≥ 1/3:</b> –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–æ–º–µ—Ä 101' –∏–ª–∏ '–õ–æ–±–±–∏').",
        parse_mode="HTML",
    )
    return LOCATION


async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏."""
    message = update.effective_message
    location_text = message.text
    context.user_data["current_request"].location = location_text

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –ø–æ–ª–æ–º–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    keyboard = [[issue] for issue in settings.issue_types]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, one_time_keyboard=True, resize_keyboard=True
    )

    await message.reply_text(
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <b>{location_text}</b>\n\n"
        "<b>–®–∞–≥ 2/3:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )
    return ISSUE_TYPE


async def get_issue_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    message = update.effective_message
    issue_type_text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if issue_type_text not in settings.issue_types:
        await message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."
        )
        return ISSUE_TYPE  # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ

    context.user_data["current_request"].issue_type = issue_type_text

    await message.reply_text(
        f"–¢–∏–ø –ø–æ–ª–æ–º–∫–∏: <b>{issue_type_text}</b>\n\n"
        "<b>–®–∞–≥ 3/3:</b> –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª–æ–º–∫–∏. "
        "–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ /skip.",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML",
    )
    return PHOTO


async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    message = update.effective_message
    request: MaintenanceRequest = context.user_data["current_request"]

    photo_file = message.photo[-1]
    request.photo_file_id = photo_file.file_id

    await message.reply_text(
        "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –°–æ—Ö—Ä–∞–Ω—è—é –∑–∞—è–≤–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )

    google_api: GoogleAPIService = context.application.bot_data["google_api_service"]
    request_uuid_str = str(request.request_uuid)

    try:
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'creating'
        request.status = "creating"
        await google_api.create_request_row(request.model_dump(mode="json"))

        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Drive
        file_name = f"request_{request_uuid_str}.jpg"
        photo_url = await google_api.upload_photo_to_drive(
            file_id=request.photo_file_id, file_name=file_name, bot=context.bot
        )

        if not photo_url:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π RuntimeError
            raise RuntimeError("Failed to get photo URL from Google Drive")

        # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, –º–µ–Ω—è—è —Å—Ç–∞—Ç—É—Å –Ω–∞ 'new' –∏ –¥–æ–±–∞–≤–ª—è—è URL
        await google_api.update_request_after_upload(
            request_uuid=request_uuid_str, photo_url=photo_url
        )

        # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç–µ—Ö—Å–ª—É–∂–±—ã
        await NotificationService.send_new_request_notification(
            bot=context.bot, chat_id=settings.tech_chat_id, request=request
        )

        await message.reply_text(SUCCESS_MESSAGE)

        logger.info(f"New request with photo successfully saved: {request_uuid_str}")

    except Exception as e:
        logger.error(
            f"Transactional request creation failed for {request_uuid_str}: {e}",
            exc_info=True,
        )

        # –®–∞–≥ 4 (–û—Ç–∫–∞—Ç): –£–¥–∞–ª—è–µ–º "—á–µ—Ä–Ω–æ–≤—É—é" –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        logger.info(f"Attempting to roll back creation for request {request_uuid_str}")
        await google_api.delete_request_by_uuid(request_uuid_str)

        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
        )

    del context.user_data["current_request"]
    return ConversationHandler.END


async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥ —Å —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É."""
    message = update.effective_message
    request: MaintenanceRequest = context.user_data["current_request"]

    await message.reply_text("–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞—è–≤–∫—É...")
    google_api: GoogleAPIService = context.application.bot_data["google_api_service"]

    try:
        # –¢–∞–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –Ω–µ—Ç, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'
        request.status = "new"
        await google_api.create_request_row(request.model_dump(mode="json"))

        await NotificationService.send_new_request_notification(
            bot=context.bot, chat_id=settings.tech_chat_id, request=request
        )

        await message.reply_text(SUCCESS_MESSAGE)
        logger.info(
            f"New request without photo successfully saved: {request.request_uuid}"
        )

    except Exception as e:
        logger.error(
            f"Request creation (no photo) failed for {request.request_uuid}: {e}",
            exc_info=True,
        )
        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    del context.user_data["current_request"]
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    if "current_request" in context.user_data:
        del context.user_data["current_request"]

    await update.effective_message.reply_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


@require_role("technician", "admin")
async def request_callback_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∑–∞—è–≤–∫–∞–º–∏.
    """
    query = update.callback_query
    await query.answer()

    action, request_uuid = query.data.split(":", 1)
    user = update.effective_user
    db_user = context.user_data["db_user"]

    google_api: GoogleAPIService = context.application.bot_data["google_api_service"]

    if action == "accept_req":
        success = await google_api.accept_request(
            request_uuid=request_uuid, user_id=user.id, user_name=db_user.name
        )
        if success:
            original_text = query.message.text
            new_text = original_text.replace(
                "–°—Ç–∞—Ç—É—Å: üÜï –ù–æ–≤—ã–π", f"–°—Ç–∞—Ç—É—Å: üõ† –í —Ä–∞–±–æ—Ç–µ —É {db_user.name}"
            )
            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"complete_req:{request_uuid}"
                    )
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=new_text, reply_markup=reply_markup)
        else:
            await query.answer(
                "‚ö†Ô∏è –≠—Ç—É –∑–∞—è–≤–∫—É —É–∂–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.", show_alert=True
            )

    elif action == "complete_req":
        success = await google_api.complete_request(
            request_uuid=request_uuid, user_id=user.id
        )
        if success:
            original_text = query.message.text
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            text_without_assignee = original_text.split("–°—Ç–∞—Ç—É—Å:")[0]
            new_text = text_without_assignee + f"–°—Ç–∞—Ç—É—Å: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ({db_user.name})"
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await query.edit_message_text(text=new_text, reply_markup=None)
        else:
            await query.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.",
                show_alert=True,
            )
