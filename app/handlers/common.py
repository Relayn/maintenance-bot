"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

import json
import logging

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.core.decorators import require_role
from app.services.user_service import UserService

logger = logging.getLogger(__name__)


@require_role("admin", "housekeeper", "technician")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –∏–º—è –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
    """
    user = update.effective_user
    db_user = context.user_data["db_user"]
    user_service: UserService = context.application.bot_data["user_service"]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    current_name = user.first_name or user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è
    if db_user.name != current_name:
        logger.info(
            f"Updating name for user {user.id}: '{db_user.name}' -> '{current_name}'"
        )
        user_service.update_user_name(user.id, current_name)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        db_user.name = current_name

    logger.info(
        f"Authorized user {user.id} ({db_user.name}) with role '{db_user.role}' started the bot."
    )

    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {db_user.name}! üëã"
        f"\n\n–í–∞—à —Å—Ç–∞—Ç—É—Å: <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b>."
        f"\n–í–∞—à–∞ —Ä–æ–ª—å: <b>{db_user.role}</b>."
    )


async def show_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Telegram ID."""
    user = update.effective_user
    if not user:
        return

    logger.info(f"User {user.id} requested their ID.")
    await update.message.reply_text(
        f"–í–∞—à Telegram ID: <code>{user.id}</code>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
        parse_mode="HTML",
    )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """

    logger.error("Exception while handling an update:", exc_info=context.error)

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(update, Update):
        update_str = json.dumps(update.to_dict(), indent=2, ensure_ascii=False)
    else:
        update_str = str(update)

    message = (
        f"‚ÄºÔ∏è **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ** ‚ÄºÔ∏è\n\n"
        f"<pre>update = {update_str}</pre>\n\n"
        f"<pre>context.chat_data = {str(context.chat_data)}</pre>\n\n"
        f"<pre>context.user_data = {str(context.user_data)}</pre>\n\n"
        f"<pre>{context.error}</pre>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in context.bot_data.get("settings", {}).admin_ids:
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message) > 4096:
                for x in range(0, len(message), 4096):
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message[x : x + 4096],
                        parse_mode=ParseMode.HTML,
                    )
            else:
                await context.bot.send_message(
                    chat_id=admin_id, text=message, parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"Failed to send error message to admin {admin_id}: {e}")


async def unauthorized_user_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ.
    """
    user = update.effective_user
    if not user:
        return

    logger.warning(
        f"Received message from unauthorized user {user.id} ({user.first_name})."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_message = (
        f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"–ò–º—è: {user.first_name}\n"
        f"Username: @{user.username}\n"
        f"ID: <code>{user.id}</code>\n\n"
        f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        f"<code>/adduser {user.id} <—Ä–æ–ª—å></code>"
    )
    for admin_id in context.bot_data.get("settings", {}).admin_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id, text=admin_message, parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to send unauthorized notice to admin {admin_id}: {e}")

    # –û—Ç–≤–µ—á–∞–µ–º —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
